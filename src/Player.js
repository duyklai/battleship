/**
 * This factory function will take care of the player's play.
 * Currently only need to support computer's play as the player's play will be handle by "Eventshandler.js"
 * @param {string} input_name currently not used
 * @param {gameboard object} enemy_board
 * @param {gameboard object} enemy_div
 */
const Player = (input_name, enemy_board, enemy_div) => {
  const name = input_name;
  const enemyBoard = enemy_board;
  const enemyDiv = enemy_div;

  // Currently taken care of by EventsHandler
  const playerPlay = e => {
    // Player takes turn
  };

  // Function to run the computer's play; DOES change DOM, should be move to EventsHandler
  // Returns true: if computer play DID NOT end the game
  // Returns false: if computer play hit the last part of the last ship and sunken all ships
  const computerPlay = () => {
    // Computer takes turn
    let index = 0;
    // These x/y coordinates has been checked for validity to ensure attack will be hit or miss only (no repeat attacks)
    [x_coor, y_coor] = getRandCoord();
    let attack = enemyBoard.receiveAttack(x_coor, y_coor);

    // Going through all nodes and looking for the dataset coordinatesX/Y to match with the random coordinates generated by getRandCoord()
    enemyDiv.childNodes.forEach(node => {
      if (
        node.dataset.coordinateX == x_coor &&
        node.dataset.coordinateY == y_coor
      ) {
        // Once found and the object is a ship, mark the attack as hit with red
        if (attack) {
          enemyDiv.childNodes[index].style.backgroundColor = 'red';
        } // Else, mark the attack as miss with white
        else enemyDiv.childNodes[index].style.backgroundColor = 'white';
      }
      index++;
    });

    // Checking if computerPlay has successfully sunken all ships
    if (enemyBoard.sunkenAll()) {
      let status_board = document.querySelector('.ship-div');
      // Mark message on status board with "lost" message
      status_board.firstChild.innerHTML =
        'All of your ships has been sunk. You lost!';
      // Remove all nodes other than "title"
      while (status_board.childNodes.length > 1) {
        status_board.removeChild(status_board.lastChild);
      }
      // Add restart button
      const restart_game = document.createElement('button');
      restart_game.className = 'restart-game';
      restart_game.innerHTML = 'Restart Game';
      // A quick anonymous function to prevent instant reload onload
      restart_game.onclick = function() {
        document.location.reload();
      };
      status_board.appendChild(restart_game);
      return false;
    }
    return true;
  };

  // Private functions:
  const getRandCoord = () => {
    xPlay = Math.floor(Math.random() * 10);
    yPlay = Math.floor(Math.random() * 10);
    // Check to make sure coordinates had not been hit before
    while (enemyBoard.checkAttack(xPlay, yPlay)) {
      // Try again with new coordinates
      xPlay = Math.floor(Math.random() * 10);
      yPlay = Math.floor(Math.random() * 10);
    }
    return [xPlay, yPlay];
  };

  return { computerPlay };
};

module.exports = Player;
